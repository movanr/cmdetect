/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnverifiedRouteImport } from './routes/unverified'
import { Route as ReceptionistRouteImport } from './routes/receptionist'
import { Route as PhysicianRouteImport } from './routes/physician'
import { Route as PatientRouteImport } from './routes/patient'
import { Route as LoginRouteImport } from './routes/login'
import { Route as KeySetupRouteImport } from './routes/key-setup'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'

const UnverifiedRoute = UnverifiedRouteImport.update({
  id: '/unverified',
  path: '/unverified',
  getParentRoute: () => rootRouteImport,
} as any)
const ReceptionistRoute = ReceptionistRouteImport.update({
  id: '/receptionist',
  path: '/receptionist',
  getParentRoute: () => rootRouteImport,
} as any)
const PhysicianRoute = PhysicianRouteImport.update({
  id: '/physician',
  path: '/physician',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientRoute = PatientRouteImport.update({
  id: '/patient',
  path: '/patient',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const KeySetupRoute = KeySetupRouteImport.update({
  id: '/key-setup',
  path: '/key-setup',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/key-setup': typeof KeySetupRoute
  '/login': typeof LoginRoute
  '/patient': typeof PatientRoute
  '/physician': typeof PhysicianRoute
  '/receptionist': typeof ReceptionistRoute
  '/unverified': typeof UnverifiedRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/key-setup': typeof KeySetupRoute
  '/login': typeof LoginRoute
  '/patient': typeof PatientRoute
  '/physician': typeof PhysicianRoute
  '/receptionist': typeof ReceptionistRoute
  '/unverified': typeof UnverifiedRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/key-setup': typeof KeySetupRoute
  '/login': typeof LoginRoute
  '/patient': typeof PatientRoute
  '/physician': typeof PhysicianRoute
  '/receptionist': typeof ReceptionistRoute
  '/unverified': typeof UnverifiedRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/key-setup'
    | '/login'
    | '/patient'
    | '/physician'
    | '/receptionist'
    | '/unverified'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/key-setup'
    | '/login'
    | '/patient'
    | '/physician'
    | '/receptionist'
    | '/unverified'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/key-setup'
    | '/login'
    | '/patient'
    | '/physician'
    | '/receptionist'
    | '/unverified'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  KeySetupRoute: typeof KeySetupRoute
  LoginRoute: typeof LoginRoute
  PatientRoute: typeof PatientRoute
  PhysicianRoute: typeof PhysicianRoute
  ReceptionistRoute: typeof ReceptionistRoute
  UnverifiedRoute: typeof UnverifiedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unverified': {
      id: '/unverified'
      path: '/unverified'
      fullPath: '/unverified'
      preLoaderRoute: typeof UnverifiedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/receptionist': {
      id: '/receptionist'
      path: '/receptionist'
      fullPath: '/receptionist'
      preLoaderRoute: typeof ReceptionistRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/physician': {
      id: '/physician'
      path: '/physician'
      fullPath: '/physician'
      preLoaderRoute: typeof PhysicianRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patient': {
      id: '/patient'
      path: '/patient'
      fullPath: '/patient'
      preLoaderRoute: typeof PatientRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/key-setup': {
      id: '/key-setup'
      path: '/key-setup'
      fullPath: '/key-setup'
      preLoaderRoute: typeof KeySetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  KeySetupRoute: KeySetupRoute,
  LoginRoute: LoginRoute,
  PatientRoute: PatientRoute,
  PhysicianRoute: PhysicianRoute,
  ReceptionistRoute: ReceptionistRoute,
  UnverifiedRoute: UnverifiedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
