/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnverifiedRouteImport } from './routes/unverified'
import { Route as TeamRouteImport } from './routes/team'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as PatientRouteImport } from './routes/patient'
import { Route as LoginRouteImport } from './routes/login'
import { Route as KeySetupRouteImport } from './routes/key-setup'
import { Route as InvitesRouteImport } from './routes/invites'
import { Route as CasesRouteImport } from './routes/cases'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsSecurityRouteImport } from './routes/settings/security'
import { Route as SettingsProfileRouteImport } from './routes/settings/profile'
import { Route as SettingsOrganizationRouteImport } from './routes/settings/organization'
import { Route as InvitesNewRouteImport } from './routes/invites_.new'

const UnverifiedRoute = UnverifiedRouteImport.update({
  id: '/unverified',
  path: '/unverified',
  getParentRoute: () => rootRouteImport,
} as any)
const TeamRoute = TeamRouteImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const PatientRoute = PatientRouteImport.update({
  id: '/patient',
  path: '/patient',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const KeySetupRoute = KeySetupRouteImport.update({
  id: '/key-setup',
  path: '/key-setup',
  getParentRoute: () => rootRouteImport,
} as any)
const InvitesRoute = InvitesRouteImport.update({
  id: '/invites',
  path: '/invites',
  getParentRoute: () => rootRouteImport,
} as any)
const CasesRoute = CasesRouteImport.update({
  id: '/cases',
  path: '/cases',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsSecurityRoute = SettingsSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsProfileRoute = SettingsProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsOrganizationRoute = SettingsOrganizationRouteImport.update({
  id: '/organization',
  path: '/organization',
  getParentRoute: () => SettingsRoute,
} as any)
const InvitesNewRoute = InvitesNewRouteImport.update({
  id: '/invites_/new',
  path: '/invites/new',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cases': typeof CasesRoute
  '/invites': typeof InvitesRoute
  '/key-setup': typeof KeySetupRoute
  '/login': typeof LoginRoute
  '/patient': typeof PatientRoute
  '/settings': typeof SettingsRouteWithChildren
  '/team': typeof TeamRoute
  '/unverified': typeof UnverifiedRoute
  '/invites/new': typeof InvitesNewRoute
  '/settings/organization': typeof SettingsOrganizationRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/security': typeof SettingsSecurityRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cases': typeof CasesRoute
  '/invites': typeof InvitesRoute
  '/key-setup': typeof KeySetupRoute
  '/login': typeof LoginRoute
  '/patient': typeof PatientRoute
  '/settings': typeof SettingsRouteWithChildren
  '/team': typeof TeamRoute
  '/unverified': typeof UnverifiedRoute
  '/invites/new': typeof InvitesNewRoute
  '/settings/organization': typeof SettingsOrganizationRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/security': typeof SettingsSecurityRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cases': typeof CasesRoute
  '/invites': typeof InvitesRoute
  '/key-setup': typeof KeySetupRoute
  '/login': typeof LoginRoute
  '/patient': typeof PatientRoute
  '/settings': typeof SettingsRouteWithChildren
  '/team': typeof TeamRoute
  '/unverified': typeof UnverifiedRoute
  '/invites_/new': typeof InvitesNewRoute
  '/settings/organization': typeof SettingsOrganizationRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/security': typeof SettingsSecurityRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cases'
    | '/invites'
    | '/key-setup'
    | '/login'
    | '/patient'
    | '/settings'
    | '/team'
    | '/unverified'
    | '/invites/new'
    | '/settings/organization'
    | '/settings/profile'
    | '/settings/security'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cases'
    | '/invites'
    | '/key-setup'
    | '/login'
    | '/patient'
    | '/settings'
    | '/team'
    | '/unverified'
    | '/invites/new'
    | '/settings/organization'
    | '/settings/profile'
    | '/settings/security'
  id:
    | '__root__'
    | '/'
    | '/cases'
    | '/invites'
    | '/key-setup'
    | '/login'
    | '/patient'
    | '/settings'
    | '/team'
    | '/unverified'
    | '/invites_/new'
    | '/settings/organization'
    | '/settings/profile'
    | '/settings/security'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CasesRoute: typeof CasesRoute
  InvitesRoute: typeof InvitesRoute
  KeySetupRoute: typeof KeySetupRoute
  LoginRoute: typeof LoginRoute
  PatientRoute: typeof PatientRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  TeamRoute: typeof TeamRoute
  UnverifiedRoute: typeof UnverifiedRoute
  InvitesNewRoute: typeof InvitesNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unverified': {
      id: '/unverified'
      path: '/unverified'
      fullPath: '/unverified'
      preLoaderRoute: typeof UnverifiedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/team': {
      id: '/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof TeamRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/patient': {
      id: '/patient'
      path: '/patient'
      fullPath: '/patient'
      preLoaderRoute: typeof PatientRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/key-setup': {
      id: '/key-setup'
      path: '/key-setup'
      fullPath: '/key-setup'
      preLoaderRoute: typeof KeySetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invites': {
      id: '/invites'
      path: '/invites'
      fullPath: '/invites'
      preLoaderRoute: typeof InvitesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cases': {
      id: '/cases'
      path: '/cases'
      fullPath: '/cases'
      preLoaderRoute: typeof CasesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/security': {
      id: '/settings/security'
      path: '/security'
      fullPath: '/settings/security'
      preLoaderRoute: typeof SettingsSecurityRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/organization': {
      id: '/settings/organization'
      path: '/organization'
      fullPath: '/settings/organization'
      preLoaderRoute: typeof SettingsOrganizationRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/invites_/new': {
      id: '/invites_/new'
      path: '/invites/new'
      fullPath: '/invites/new'
      preLoaderRoute: typeof InvitesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface SettingsRouteChildren {
  SettingsOrganizationRoute: typeof SettingsOrganizationRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  SettingsSecurityRoute: typeof SettingsSecurityRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsOrganizationRoute: SettingsOrganizationRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  SettingsSecurityRoute: SettingsSecurityRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CasesRoute: CasesRoute,
  InvitesRoute: InvitesRoute,
  KeySetupRoute: KeySetupRoute,
  LoginRoute: LoginRoute,
  PatientRoute: PatientRoute,
  SettingsRoute: SettingsRouteWithChildren,
  TeamRoute: TeamRoute,
  UnverifiedRoute: UnverifiedRoute,
  InvitesNewRoute: InvitesNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
