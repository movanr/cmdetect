name: hasura

services:
  graphql-engine:
    image: hasura/graphql-engine:v2.46.0
    container_name: hasura_graphql
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: ${DB_URL}

      HASURA_GRAPHQL_DB_URL_FROM_ENV: ${DB_URL}

      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: ${DB_URL}

      # WICHTIG: Admin Secret aktivieren!
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}

      # JWT Configuration for Better Auth
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}

      # Console-Einstellungen
      # enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true" # Für Produktion auf "false" setzen
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log

      # CORS für lokale Entwicklung
      HASURA_GRAPHQL_CORS_DOMAIN: "http://localhost:5173,http://localhost:3000,http://localhost:9695"

      # Data Connector Konfiguration (aus der offiziellen Datei)
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'

    depends_on:
      data-connector-agent:
        condition: service_healthy
    networks:
      - hasura-network

  data-connector-agent:
    image: hasura/graphql-data-connector:v2.46.0
    container_name: hasura_data_connector
    restart: always
    ports:
      - "8081:8081"
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - hasura-network

# No volumes needed locally

networks:
  hasura-network:
    driver: bridge
